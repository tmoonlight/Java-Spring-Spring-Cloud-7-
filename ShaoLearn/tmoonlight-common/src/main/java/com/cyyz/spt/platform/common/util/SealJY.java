package com.cyyz.spt.platform.common.util;

import org.apache.commons.lang3.StringUtils;

import javax.imageio.ImageIO;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.*;
import java.util.HashMap;
import java.util.Map;

/**
 * 解压缩
 * @author Administrator
 *
 */
public class SealJY {

    public static int[] initImageDate(int[] byteSealBasicTX,int width, int height){
        int[] result = new int[byteSealBasicTX.length];
        for (int y = 0; y <= (height - 1); y++){
            for (int x = 0; x <= (width - 1); x++){
                int cc = 22 + x + y * width;
                int dd = byteSealBasicTX[cc];
                if (dd == 0x3){//防标志
                    result[cc]=0x0;
                }else{
                    result[cc]=byteSealBasicTX[cc];
                }
            }
        }
        return result;
    }

    public static BufferedImage getTX(int[] byteTX, int width, int height, String type,String filePath) {
        int[] byteSealBasicTX = initImageDate(byteTX, width, height);
        //创建一张位图并且使用它创建一个
        //Graphics对象
        //368823
        //358801

        //Bitmap bmp = new Bitmap(width,height, PixelFormat.Format24bppRgb);
        //bmp.SetResolution(400, 400);
        BufferedImage bmp = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
        for (int y = 0; y <= (height - 1); y++) {
            for (int x = 0; x <= (width - 1); x++) {
                int cc = 22 + x + y * width;

                int dd = byteSealBasicTX[cc];
                Color sColor = new Color(255, 255, 255);
                if (type == "0") {
                    if (dd == 0x0) {//前景红色
                        sColor = new Color(255, 0, 0);
                    } else if (dd == 0x1) {//背景白色
                        sColor = new Color(255, 255, 255);
                    } else if (dd == 0x2) {//数字蓝色
                        sColor = new Color(0, 0, 255);
                    } else if (dd == 0x3) {//防标志
                        sColor = new Color(0, 255, 0);
                    }
                    //else if (dd == 0x4)
                    //{
                    //    sColor = Color.FromArgb(192, 88, 207);
                    //}
                } else {
                    if (dd == 0x0) {
                        sColor = new Color(0, 0, 0);
                    } else if (dd == 0x1) {
                        sColor = new Color(255, 255, 255);
                    } else if (dd == 0x2) {
                        sColor = new Color(0, 0, 0);
                    } else if (dd == 0x3) {
                        sColor = new Color(255, 255, 255);
                    }
                }
                Graphics g = bmp.getGraphics();
                g.setColor(sColor);
                g.drawLine(x, y, x, y);
            }
        }
        if (StringUtils.isNotBlank(filePath)) {
            try {
                File f = new File(filePath);
                try {
                    ImageIO.write(bmp, "bmp", f);
                    bmp.flush();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        return bmp;
    }

    public static int[] yzjys(int[] BinByte, int width, int height)
    {
        int[] ImgByte;
        //string Sid;
        int n, m;
        int i, k, nLine;
        int j, w;
        byte TZ = 0x0;
        boolean wxy;
        int BinLen;
        //const Byte ImgQJ = 0x0;
        final byte ImgBJ = 0x20;//32
        final byte ImgBM = 0x40;//64
        final byte ImgQJTZ = 0x60;//96
        final byte ImgBJTZ = (byte)0x80;//128
        int[] Result;



        //nWidth = 599;
        //nHeight = 599;

        ImgByte = new int[22 + width * height + 10000];

        for (k = 0; k <= 21; k++)
        {
            ImgByte[k] = BinByte[k];
        }
        for (i = 22; i <= 22 + width * height; i++)
        {
            ImgByte[i] = 0x1;
        }
        //ImgByte[21] = Byte.parseByte("2");
        ImgByte[21] = 50;
        BinLen = BinByte.length;
        i = 0;
        j = 0;
        k = 22;
        w = 22;
        nLine = 0;
        try
        {
            while (k < BinLen)
            {
                wxy = true;
                if ((BinByte[k] < 32) && (BinByte[k] > 0x0))
                {
                    TZ = 0x0;
                    i = BinByte[k];
                }
                else if ((BinByte[k] < 225) && (BinByte[k] >= 192))
                {
                    TZ = 0x0;
                    m = BinByte[k] - 192;
                    k = k + 1;
                    n = BinByte[k];
                    i = m * 256 + n;
                }
                else if ((BinByte[k] < 64) && (BinByte[k] > 32))
                {
                    TZ = 0x1;
                    i = BinByte[k] - ImgBJ;
                }
                else if ((BinByte[k] < 192) && (BinByte[k] >= 160))
                {
                    TZ = 0x1;
                    m = BinByte[k] - 160;
                    k = k + 1;
                    n = BinByte[k];
                    i = m * 256 + n;
                }
                else if ((BinByte[k] < 96) && (BinByte[k] > 64))
                {
                    TZ = 0x2;
                    i = BinByte[k] - ImgBM;
                }
                else if ((BinByte[k] < 128) && (BinByte[k] > 96))
                {
                    TZ = 0x3;
                    i = BinByte[k] - ImgQJTZ;
                }
                else if ((BinByte[k] < 160) && (BinByte[k] > 128))
                {
                    TZ = 0x4;
                    i = BinByte[k] - ImgBJTZ;
                }
                else if (BinByte[k] == 0)
                {
                    nLine = nLine + 1;
                    w = 22 + nLine * width;
                    wxy = false;
                }

                if ((w > 22 + width * height))
                {
                    wxy = false;
                }

                if (wxy)
                {
                    for (j = w; j <= w + i - 1; j++)
                    {
                        ImgByte[j] = TZ;
                    }
                    w = w + i;
                }

                k = k + 1;
            }
        }
        catch (Exception e)
        {
            j = w;
        }
        Result = ImgByte;
        return Result;
    }

    /**
     * 获得指定文件的byte数组
     */
    public static byte[] getBytes(String filePath) {
        byte[] buffer = null;
        try {
            File file = new File(filePath);
            FileInputStream fis = new FileInputStream(file);
            ByteArrayOutputStream bos = new ByteArrayOutputStream(1000);
            byte[] b = new byte[1000];
            int n;
            while ((n = fis.read(b)) != -1) {
                bos.write(b, 0, n);
            }
            fis.close();
            bos.close();
            buffer = bos.toByteArray();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return buffer;
    }

    public static byte[] imageToBytes(BufferedImage bImage, String format) {
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        try {
            ImageIO.write(bImage, format, out);
        } catch (IOException e) {
            e.printStackTrace();
        }
        return out.toByteArray();
    }
    /**
     * //获取章模
     * @param seal_ys_byte 压缩后的印模数据
     */
    public static Map<String, Object> getSealImage(byte[] seal_ys_byte,String filePath) {
        try {
            int nWidth = 0, nHeight = 0;
            byte[] ysByteSealBasicTX = seal_ys_byte;
            String nWidthStr = String.valueOf((char) ((int) (ysByteSealBasicTX[13]))) + String.valueOf((char) ((int) (ysByteSealBasicTX[14]))) + String.valueOf((char) ((int) (ysByteSealBasicTX[15])));
            String nHeightStr = String.valueOf((char) ((int) (ysByteSealBasicTX[17]))) + String.valueOf((char) ((int) (ysByteSealBasicTX[18]))) + String.valueOf((char) ((int) (ysByteSealBasicTX[19])));
            try {
                nWidth = Integer.parseInt(nWidthStr);
                nHeight = Integer.parseInt(nHeightStr);
            } catch (RuntimeException e) {
                nWidth = 0;
                nHeight = 0;
            }
            if (nWidth != 0 && nHeight != 0) {
                int data[] = new int[ysByteSealBasicTX.length];
                for (int i = 0; i < ysByteSealBasicTX.length; i++) {
                    data[i] = ysByteSealBasicTX[i] & 0xff;
                }
                int[] byteSealBasicTX = yzjys(data, nWidth, nHeight);
                int data_byte[] = new int[byteSealBasicTX.length];
                for (int i = 0; i < byteSealBasicTX.length; i++) {
                    data_byte[i] = byteSealBasicTX[i];
                }

                byte[] byteImage=imageToBytes(getTX(data_byte, nWidth, nHeight, "0", filePath), "bmp");
                Map<String, Object> resMap = new HashMap<String, Object>();
                resMap.put("data", byteImage);
                resMap.put("width", nWidth);
                resMap.put("height", nHeight);
                return resMap;

            }
        } catch (RuntimeException e) {
        }
        return null;
    }

    /**
     * //解压缩
     * @param seal_ys_byte 压缩后的印模数据
     */
    public static void jyTest(byte[] seal_ys_byte,String filePath){
        int nWidth = 0,nHeight = 0;
        byte[] ysByteSealBasicTX = seal_ys_byte;
        String nWidthStr=String.valueOf((char)((int)(ysByteSealBasicTX[13])))+String.valueOf((char)((int)(ysByteSealBasicTX[14])))+String.valueOf((char)((int)(ysByteSealBasicTX[15])));
        String nHeightStr=String.valueOf((char)((int)(ysByteSealBasicTX[17])))+String.valueOf((char)((int)(ysByteSealBasicTX[18])))+String.valueOf((char)((int)(ysByteSealBasicTX[19])));
        try {
            nWidth = Integer.parseInt(nWidthStr);
            nHeight = Integer.parseInt(nHeightStr);
        } catch (RuntimeException e) {
            nWidth = 0;
            nHeight = 0;
        }
        if(nWidth!=0 && nHeight!=0){
            int data[] = new int[ysByteSealBasicTX.length];
            for(int i=0;i<ysByteSealBasicTX.length;i++){
                data[i] = ysByteSealBasicTX[i] & 0xff;
            }
            int[] byteSealBasicTX = yzjys(data, nWidth, nHeight);
            int data_byte[] = new int[byteSealBasicTX.length];
            for(int i=0;i<byteSealBasicTX.length;i++){
                data_byte[i] = byteSealBasicTX[i];
            }
            getTX(data_byte, nWidth, nHeight, "0",filePath);
        }
    }

    public static void main(String args[]) throws Exception{
        //base64后的印模数据（压缩过后存在数据库的数据）
        String decode="";
        //解压印模并生成图片
        SealJY.jyTest(Base64Util.decode(decode),"D://image//201608181125.bmp");
    }
}
